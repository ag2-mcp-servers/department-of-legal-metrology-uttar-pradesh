# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T15:11:32+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyHeader, BaseSecurity

from models import (
    DelcsCertificatePostRequest,
    DelcsCertificatePostResponse,
    DelcsCertificatePostResponse1,
    DelcsCertificatePostResponse2,
    DelcsCertificatePostResponse3,
    DelcsCertificatePostResponse4,
    DelcsCertificatePostResponse5,
    DelcsCertificatePostResponse6,
    MalcsCertificatePostRequest,
    MalcsCertificatePostResponse,
    MalcsCertificatePostResponse1,
    MalcsCertificatePostResponse2,
    MalcsCertificatePostResponse3,
    MalcsCertificatePostResponse4,
    MalcsCertificatePostResponse5,
    MalcsCertificatePostResponse6,
    PalcsCertificatePostRequest,
    PalcsCertificatePostResponse,
    PalcsCertificatePostResponse1,
    PalcsCertificatePostResponse2,
    PalcsCertificatePostResponse3,
    PalcsCertificatePostResponse4,
    PalcsCertificatePostResponse5,
    PalcsCertificatePostResponse6,
    RelcsCertificatePostRequest,
    RelcsCertificatePostResponse,
    RelcsCertificatePostResponse1,
    RelcsCertificatePostResponse2,
    RelcsCertificatePostResponse3,
    RelcsCertificatePostResponse4,
    RelcsCertificatePostResponse5,
    RelcsCertificatePostResponse6,
)

app = MCPProxy(
    description='Licenses issued by Department of Legal Metrology, Uttar Pradesh can be pulled by citizens into their DigiLocker accounts.',
    termsOfService='https://apisetu.gov.in/terms.php',
    title='Department of Legal Metrology, Uttar Pradesh',
    version='3.0.0',
    servers=[{'url': 'https://apisetu.gov.in/legalmetrologyup/v3'}],
)


@app.post(
    '/delcs/certificate',
    description=""" API to verify Dealer License. """,
    tags=['license_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def delcs(body: DelcsCertificatePostRequest = None):
    """
    Dealer License
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/malcs/certificate',
    description=""" API to verify Manufacturer License. """,
    tags=['license_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def malcs(body: MalcsCertificatePostRequest = None):
    """
    Manufacturer License
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/palcs/certificate',
    description=""" API to verify Packers License. """,
    tags=['license_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def palcs(body: PalcsCertificatePostRequest = None):
    """
    Packers License
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/relcs/certificate',
    description=""" API to verify Repairer License. """,
    tags=['license_management'],
    security=[
        APIKeyHeader(name="X-APISETU-APIKEY"),
        APIKeyHeader(name="X-APISETU-CLIENTID"),
    ],
)
def relcs(body: RelcsCertificatePostRequest = None):
    """
    Repairer License
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
